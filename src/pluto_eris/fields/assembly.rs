/*
 * cpu Intel(R) Core(TM) i5-8279U CPU @ 2.40GHz
 * ratio 1.9680
 * seed 2873807355303935
 * CC / CFLAGS gcc / -march=native -mtune=native -O3
 * cyclegoal; 10000
 * using counter; RDTSCP
 * framePointer omit
 * memoryConstraints none
 * time needed: 730941 ms on 8000 evaluations.
 * Time spent for assembling and measuring (initial batch_size=19, initial num_batches=31): 12648 ms
 * number of used evaluations: 8000
 * Ratio (time for assembling + measure)/(total runtime for 8000 evals): 0.01730372218824775
 * number reverted permutation / tried permutation: 2688 / 3989 =67.385%
 * number reverted decision / tried decision: 2477 / 4010 =61.771%
 * validated in 179.094s
*/
use std::arch::asm;

//#[cfg(target_arch = "x86_64")]
pub fn mul_asm(out: &mut [u64;7], arg1: &[u64; 7], arg2: &[u64; 7]) {
    let r_in1 = *arg1;
    let mut r_in2 = *arg2;
    let mut r_out: &mut[u64; 7] = out;//[0, 0, 0, 0, 0, 0, 0];

    unsafe {
        asm!(
            // "nop",
            "sub rsp, 1288",
            "mov rax, rdx",
            "mov rdx, [ rdx + 0x0 ]",
            "mulx r11, r10, [ rsi + 0x30 ]",
            "mov rdx, [ rsi + 0x18 ]",
            "mulx r8, rcx, [ rax + 0x0 ]",
            "mov rdx, [ rax + 0x30 ]",
            "mov [ rsp - 0x80 ], rbx",
            "mulx rbx, r9, [ rsi + 0x8 ]",
            "mov rdx, [ rax + 0x10 ]",
            "mov [ rsp - 0x78 ], rbp",
            "mov [ rsp - 0x70 ], r12",
            "mulx r12, rbp, [ rsi + 0x28 ]",
            "mov rdx, [ rax + 0x10 ]",
            "mov [ rsp - 0x68 ], r13",
            "mov [ rsp - 0x60 ], r14",
            "mulx r14, r13, [ rsi + 0x0 ]",
            "mov rdx, [ rax + 0x8 ]",
            "mov [ rsp - 0x58 ], r15",
            "mov [ rsp - 0x50 ], rdi",
            "mulx rdi, r15, [ rsi + 0x28 ]",
            "mov rdx, [ rax + 0x8 ]",
            "mov [ rsp - 0x48 ], r10",
            "mov [ rsp - 0x40 ], rcx",
            "mulx rcx, r10, [ rsi + 0x18 ]",
            "mov rdx, [ rsi + 0x0 ]",
            "mov [ rsp - 0x38 ], rbx",
            "mov [ rsp - 0x30 ], r9",
            "mulx r9, rbx, [ rax + 0x0 ]",
            "mov rdx, 0x9ffffcd2ffffffff",
            "mov [ rsp - 0x28 ], r12",
            "mov [ rsp - 0x20 ], r14",
            "mulx r14, r12, rbx",
            "mov r14, 0x9ffffcd300000001",
            "mov rdx, r14",
            "mov [ rsp - 0x18 ], r13",
            "mulx r13, r14, r12",
            "mov rdx, [ rax + 0x8 ]",
            "mov [ rsp - 0x10 ], r14",
            "mov [ rsp - 0x8 ], r9",
            "mulx r9, r14, [ rsi + 0x10 ]",
            "mov rdx, [ rax + 0x20 ]",
            "mov [ rsp + 0x0 ], r9",
            "mov [ rsp + 0x8 ], r14",
            "mulx r14, r9, [ rsi + 0x30 ]",
            "mov rdx, [ rax + 0x0 ]",
            "mov [ rsp + 0x10 ], r14",
            "mov [ rsp + 0x18 ], r9",
            "mulx r9, r14, [ rsi + 0x28 ]",
            "test al, al",
            "adox r15, r9",
            "adox rbp, rdi",
            "mov rdx, [ rsi + 0x30 ]",
            "mulx r9, rdi, [ rax + 0x8 ]",
            "mov rdx, [ rax + 0x0 ]",
            "mov [ rsp + 0x20 ], rbp",
            "mov [ rsp + 0x28 ], r15",
            "mulx r15, rbp, [ rsi + 0x8 ]",
            "mov rdx, [ rsi + 0x8 ]",
            "mov [ rsp + 0x30 ], r14",
            "mov [ rsp + 0x38 ], rbp",
            "mulx rbp, r14, [ rax + 0x8 ]",
            "adcx r14, r15",
            "seto dl",
            "mov r15, -0x2",
            "inc r15",
            "adox rdi, r11",
            "mov r11b, dl",
            "mov rdx, [ rax + 0x10 ]",
            "mov [ rsp + 0x40 ], rdi",
            "mulx rdi, r15, [ rsi + 0x30 ]",
            "mov rdx, [ rax + 0x10 ]",
            "mov [ rsp + 0x48 ], r14",
            "mov [ rsp + 0x50 ], rdi",
            "mulx rdi, r14, [ rsi + 0x8 ]",
            "adox r15, r9",
            "mov rdx, [ rax + 0x18 ]",
            "mov [ rsp + 0x58 ], r15",
            "mulx r15, r9, [ rsi + 0x8 ]",
            "adcx r14, rbp",
            "adcx r9, rdi",
            "mov rdx, 0xa2a7e8c30006b945",
            "mulx rdi, rbp, r12",
            "seto dl",
            "mov [ rsp + 0x60 ], r9",
            "mov r9, -0x2",
            "inc r9",
            "adox r10, r8",
            "mov r8b, dl",
            "mov rdx, [ rax + 0x18 ]",
            "mov [ rsp + 0x68 ], r10",
            "mulx r10, r9, [ rsi + 0x18 ]",
            "setc dl",
            "clc",
            "adcx rbp, r13",
            "mov r13, 0xe4a7a5fe8fadffd6",
            "xchg rdx, r12",
            "mov [ rsp + 0x70 ], r14",
            "mov byte ptr [ rsp + 0x78 ], r8b",
            "mulx r8, r14, r13",
            "adcx r14, rdi",
            "mov rdi, 0x443f9a5cda8a6c7b",
            "mov byte ptr [ rsp + 0x80 ], r11b",
            "mulx r11, r13, rdi",
            "mov rdi, rdx",
            "mov rdx, [ rax + 0x10 ]",
            "mov [ rsp + 0x88 ], r11",
            "mov [ rsp + 0x90 ], r15",
            "mulx r15, r11, [ rsi + 0x18 ]",
            "adox r11, rcx",
            "adcx r13, r8",
            "mov rdx, [ rsi + 0x0 ]",
            "mulx r8, rcx, [ rax + 0x8 ]",
            "adox r9, r15",
            "setc dl",
            "clc",
            "adcx rcx, [ rsp - 0x8 ]",
            "mov r15b, dl",
            "mov rdx, [ rsi + 0x18 ]",
            "mov [ rsp + 0x98 ], r9",
            "mov [ rsp + 0xa0 ], r11",
            "mulx r11, r9, [ rax + 0x20 ]",
            "adcx r8, [ rsp - 0x18 ]",
            "adox r9, r10",
            "mov rdx, [ rsi + 0x0 ]",
            "mov [ rsp + 0xa8 ], r9",
            "mulx r9, r10, [ rax + 0x18 ]",
            "adcx r10, [ rsp - 0x20 ]",
            "seto dl",
            "mov [ rsp + 0xb0 ], r11",
            "mov r11, -0x2",
            "inc r11",
            "adox rbx, [ rsp - 0x10 ]",
            "adox rbp, rcx",
            "adox r14, r8",
            "adox r13, r10",
            "mov bl, dl",
            "mov rdx, [ rax + 0x30 ]",
            "mulx r8, rcx, [ rsi + 0x0 ]",
            "mov rdx, [ rax + 0x20 ]",
            "mulx r11, r10, [ rsi + 0x8 ]",
            "seto dl",
            "mov [ rsp + 0xb8 ], r13",
            "mov r13, 0x0",
            "dec r13",
            "movzx r12, r12b",
            "adox r12, r13",
            "adox r10, [ rsp + 0x90 ]",
            "mov r12b, dl",
            "mov rdx, [ rsi + 0x20 ]",
            "mov [ rsp + 0xc0 ], r10",
            "mulx r10, r13, [ rax + 0x8 ]",
            "mov rdx, [ rsi + 0x0 ]",
            "mov [ rsp + 0xc8 ], r14",
            "mov [ rsp + 0xd0 ], rbp",
            "mulx rbp, r14, [ rax + 0x28 ]",
            "mov rdx, [ rax + 0x28 ]",
            "mov [ rsp + 0xd8 ], r10",
            "mov [ rsp + 0xe0 ], r13",
            "mulx r13, r10, [ rsi + 0x8 ]",
            "adox r10, r11",
            "mov rdx, [ rax + 0x20 ]",
            "mov [ rsp + 0xe8 ], r10",
            "mulx r10, r11, [ rsi + 0x0 ]",
            "adcx r11, r9",
            "adcx r14, r10",
            "adcx rcx, rbp",
            "mov rdx, 0xa803ca76f439266f",
            "mulx rbp, r9, rdi",
            "seto r10b",
            "mov rdx, 0x0",
            "dec rdx",
            "movzx r15, r15b",
            "adox r15, rdx",
            "adox r9, [ rsp + 0x88 ]",
            "mov rdx, [ rax + 0x28 ]",
            "mov [ rsp + 0xf0 ], r13",
            "mulx r13, r15, [ rsi + 0x18 ]",
            "mov rdx, 0x0",
            "adcx r8, rdx",
            "clc",
            "mov rdx, -0x1",
            "movzx rbx, bl",
            "adcx rbx, rdx",
            "adcx r15, [ rsp + 0xb0 ]",
            "setc bl",
            "clc",
            "movzx r12, r12b",
            "adcx r12, rdx",
            "adcx r11, r9",
            "mov rdx, [ rax + 0x0 ]",
            "mulx r9, r12, [ rsi + 0x10 ]",
            "mov rdx, 0x130e0000d7f70e4",
            "mov [ rsp + 0xf8 ], r15",
            "mov byte ptr [ rsp + 0x100 ], r10b",
            "mulx r10, r15, rdi",
            "mov rdx, [ rax + 0x0 ]",
            "mov [ rsp + 0x108 ], r12",
            "mov [ rsp + 0x110 ], r11",
            "mulx r11, r12, [ rsi + 0x20 ]",
            "adox r15, rbp",
            "mov rdx, [ rax + 0x10 ]",
            "mov [ rsp + 0x118 ], r12",
            "mulx r12, rbp, [ rsi + 0x20 ]",
            "setc dl",
            "clc",
            "adcx r11, [ rsp + 0xe0 ]",
            "adcx rbp, [ rsp + 0xd8 ]",
            "mov [ rsp + 0x120 ], rbp",
            "mov bpl, dl",
            "mov rdx, [ rsi + 0x20 ]",
            "mov [ rsp + 0x128 ], r11",
            "mov [ rsp + 0x130 ], r8",
            "mulx r8, r11, [ rax + 0x18 ]",
            "adcx r11, r12",
            "mov rdx, 0x2400000000002400",
            "mov [ rsp + 0x138 ], r11",
            "mulx r11, r12, rdi",
            "mov rdx, [ rsi + 0x20 ]",
            "mov [ rsp + 0x140 ], rcx",
            "mulx rcx, rdi, [ rax + 0x28 ]",
            "setc dl",
            "clc",
            "adcx r9, [ rsp + 0x8 ]",
            "adox r12, r10",
            "mov r10b, dl",
            "mov rdx, [ rax + 0x10 ]",
            "mov [ rsp + 0x148 ], r9",
            "mov [ rsp + 0x150 ], r12",
            "mulx r12, r9, [ rsi + 0x10 ]",
            "mov rdx, [ rsi + 0x18 ]",
            "mov [ rsp + 0x158 ], r12",
            "mov [ rsp + 0x160 ], r15",
            "mulx r15, r12, [ rax + 0x30 ]",
            "mov rdx, [ rsi + 0x20 ]",
            "mov [ rsp + 0x168 ], r14",
            "mov byte ptr [ rsp + 0x170 ], bpl",
            "mulx rbp, r14, [ rax + 0x20 ]",
            "adcx r9, [ rsp + 0x0 ]",
            "seto dl",
            "mov [ rsp + 0x178 ], r9",
            "mov r9, 0x0",
            "dec r9",
            "movzx r10, r10b",
            "adox r10, r9",
            "adox r8, r14",
            "setc r10b",
            "clc",
            "movzx rbx, bl",
            "adcx rbx, r9",
            "adcx r13, r12",
            "adox rdi, rbp",
            "mov bl, dl",
            "mov rdx, [ rax + 0x18 ]",
            "mulx r14, r12, [ rsi + 0x28 ]",
            "mov rdx, [ rax + 0x30 ]",
            "mulx r9, rbp, [ rsi + 0x20 ]",
            "setc dl",
            "mov [ rsp + 0x180 ], rdi",
            "movzx rdi, byte ptr [ rsp + 0x80 ]",
            "clc",
            "mov [ rsp + 0x188 ], r8",
            "mov r8, -0x1",
            "adcx rdi, r8",
            "adcx r12, [ rsp - 0x28 ]",
            "mov dil, dl",
            "mov rdx, [ rax + 0x18 ]",
            "mov [ rsp + 0x190 ], r12",
            "mulx r12, r8, [ rsi + 0x30 ]",
            "adox rbp, rcx",
            "seto dl",
            "movzx rcx, byte ptr [ rsp + 0x78 ]",
            "mov [ rsp + 0x198 ], rbp",
            "mov rbp, -0x1",
            "inc rbp",
            "mov rbp, -0x1",
            "adox rcx, rbp",
            "adox r8, [ rsp + 0x50 ]",
            "adox r12, [ rsp + 0x18 ]",
            "mov cl, dl",
            "mov rdx, [ rax + 0x28 ]",
            "mov [ rsp + 0x1a0 ], r12",
            "mulx r12, rbp, [ rsi + 0x30 ]",
            "movzx rdx, dil",
            "lea rdx, [ rdx + r15 ]",
            "movzx r15, cl",
            "lea r15, [ r15 + r9 ]",
            "mov rdi, rdx",
            "mov rdx, [ rsi + 0x28 ]",
            "mulx rcx, r9, [ rax + 0x20 ]",
            "mov rdx, [ rax + 0x28 ]",
            "mov [ rsp + 0x1a8 ], r8",
            "mov [ rsp + 0x1b0 ], r15",
            "mulx r15, r8, [ rsi + 0x28 ]",
            "mov rdx, [ rax + 0x18 ]",
            "mov [ rsp + 0x1b8 ], rdi",
            "mov [ rsp + 0x1c0 ], r13",
            "mulx r13, rdi, [ rsi + 0x10 ]",
            "adcx r9, r14",
            "adcx r8, rcx",
            "movzx rdx, bl",
            "lea rdx, [ rdx + r11 ]",
            "mov r11, [ rsp + 0x168 ]",
            "setc bl",
            "movzx r14, byte ptr [ rsp + 0x170 ]",
            "clc",
            "mov rcx, -0x1",
            "adcx r14, rcx",
            "adcx r11, [ rsp + 0x160 ]",
            "mov r14, [ rsp + 0x140 ]",
            "adcx r14, [ rsp + 0x150 ]",
            "adcx rdx, [ rsp + 0x130 ]",
            "mov rcx, rdx",
            "mov rdx, [ rsi + 0x30 ]",
            "mov [ rsp + 0x1c8 ], r8",
            "mov [ rsp + 0x1d0 ], r9",
            "mulx r9, r8, [ rax + 0x30 ]",
            "mov rdx, [ rsi + 0x28 ]",
            "mov [ rsp + 0x1d8 ], rcx",
            "mov [ rsp + 0x1e0 ], r14",
            "mulx r14, rcx, [ rax + 0x30 ]",
            "setc dl",
            "clc",
            "mov [ rsp + 0x1e8 ], r9",
            "mov r9, -0x1",
            "movzx rbx, bl",
            "adcx rbx, r9",
            "adcx r15, rcx",
            "mov bl, dl",
            "mov rdx, [ rax + 0x28 ]",
            "mulx r9, rcx, [ rsi + 0x10 ]",
            "setc dl",
            "clc",
            "mov [ rsp + 0x1f0 ], r15",
            "mov r15, -0x1",
            "movzx r10, r10b",
            "adcx r10, r15",
            "adcx rdi, [ rsp + 0x158 ]",
            "mov r10b, dl",
            "mov rdx, [ rsi + 0x10 ]",
            "mov byte ptr [ rsp + 0x1f8 ], bl",
            "mulx rbx, r15, [ rax + 0x20 ]",
            "adox rbp, [ rsp + 0x10 ]",
            "adcx r15, r13",
            "adcx rcx, rbx",
            "adox r8, r12",
            "mov rdx, [ rax + 0x30 ]",
            "mulx r13, r12, [ rsi + 0x10 ]",
            "mov rdx, [ rsp + 0xd0 ]",
            "seto bl",
            "mov [ rsp + 0x200 ], r8",
            "mov r8, -0x2",
            "inc r8",
            "adox rdx, [ rsp + 0x38 ]",
            "mov r8, [ rsp + 0xc8 ]",
            "adox r8, [ rsp + 0x48 ]",
            "mov [ rsp + 0x208 ], rbp",
            "mov rbp, [ rsp + 0x70 ]",
            "adox rbp, [ rsp + 0xb8 ]",
            "mov [ rsp + 0x210 ], rcx",
            "mov rcx, [ rsp + 0x110 ]",
            "adox rcx, [ rsp + 0x60 ]",
            "adcx r12, r9",
            "mov r9, 0x9ffffcd2ffffffff",
            "mov [ rsp + 0x218 ], r12",
            "mov [ rsp + 0x220 ], r15",
            "mulx r15, r12, r9",
            "mov r15, 0x2400000000002400",
            "xchg rdx, r15",
            "mov [ rsp + 0x228 ], rdi",
            "mulx rdi, r9, r12",
            "mov rdx, 0x0",
            "adcx r13, rdx",
            "mov rdx, 0xa2a7e8c30006b945",
            "mov [ rsp + 0x230 ], r13",
            "mov [ rsp + 0x238 ], rdi",
            "mulx rdi, r13, r12",
            "mov rdx, 0x9ffffcd300000001",
            "mov [ rsp + 0x240 ], rcx",
            "mov [ rsp + 0x248 ], r9",
            "mulx r9, rcx, r12",
            "clc",
            "adcx rcx, r15",
            "mov rcx, 0x130e0000d7f70e4",
            "mov rdx, r12",
            "mulx r15, r12, rcx",
            "movzx rcx, r10b",
            "lea rcx, [ rcx + r14 ]",
            "mov r14, 0xe4a7a5fe8fadffd6",
            "mov [ rsp + 0x250 ], rcx",
            "mulx rcx, r10, r14",
            "adox r11, [ rsp + 0xc0 ]",
            "seto r14b",
            "mov [ rsp + 0x258 ], r11",
            "mov r11, -0x2",
            "inc r11",
            "adox r13, r9",
            "adox r10, rdi",
            "mov rdi, 0x443f9a5cda8a6c7b",
            "mulx r11, r9, rdi",
            "adcx r13, r8",
            "adox r9, rcx",
            "mov r8, 0xa803ca76f439266f",
            "mulx rdi, rcx, r8",
            "adox rcx, r11",
            "movzx rdx, bl",
            "mov r11, [ rsp + 0x1e8 ]",
            "lea rdx, [ rdx + r11 ]",
            "adox r12, rdi",
            "adcx r10, rbp",
            "adox r15, [ rsp + 0x248 ]",
            "setc r11b",
            "clc",
            "adcx r13, [ rsp + 0x108 ]",
            "seto bl",
            "mov rbp, 0x0",
            "dec rbp",
            "movzx r11, r11b",
            "adox r11, rbp",
            "adox r9, [ rsp + 0x240 ]",
            "adcx r10, [ rsp + 0x148 ]",
            "mov rdi, [ rsp - 0x30 ]",
            "setc r11b",
            "movzx rbp, byte ptr [ rsp + 0x100 ]",
            "clc",
            "mov r8, -0x1",
            "adcx rbp, r8",
            "adcx rdi, [ rsp + 0xf0 ]",
            "adox rcx, [ rsp + 0x258 ]",
            "mov rbp, [ rsp + 0xe8 ]",
            "setc r8b",
            "clc",
            "mov [ rsp + 0x260 ], rdx",
            "mov rdx, -0x1",
            "movzx r14, r14b",
            "adcx r14, rdx",
            "adcx rbp, [ rsp + 0x1e0 ]",
            "movzx r14, r8b",
            "mov rdx, [ rsp - 0x38 ]",
            "lea r14, [ r14 + rdx ]",
            "mov rdx, 0x9ffffcd2ffffffff",
            "mov [ rsp + 0x268 ], r14",
            "mulx r14, r8, r13",
            "mov r14, 0x9ffffcd300000001",
            "mov rdx, r8",
            "mov [ rsp + 0x270 ], r15",
            "mulx r15, r8, r14",
            "adcx rdi, [ rsp + 0x1d8 ]",
            "mov r14, 0xa2a7e8c30006b945",
            "mov [ rsp + 0x278 ], rdi",
            "mov [ rsp + 0x280 ], r12",
            "mulx r12, rdi, r14",
            "setc r14b",
            "clc",
            "adcx r8, r13",
            "seto r8b",
            "mov r13, -0x2",
            "inc r13",
            "adox rdi, r15",
            "movzx r15, bl",
            "mov r13, [ rsp + 0x238 ]",
            "lea r15, [ r15 + r13 ]",
            "adcx rdi, r10",
            "mov r13, 0xe4a7a5fe8fadffd6",
            "mulx r10, rbx, r13",
            "adox rbx, r12",
            "mov r12, 0x443f9a5cda8a6c7b",
            "mov [ rsp + 0x288 ], r15",
            "mulx r15, r13, r12",
            "adox r13, r10",
            "mov r10, 0x2400000000002400",
            "mov [ rsp + 0x290 ], r13",
            "mulx r13, r12, r10",
            "mov r10, 0xa803ca76f439266f",
            "mov [ rsp + 0x298 ], r13",
            "mov byte ptr [ rsp + 0x2a0 ], r14b",
            "mulx r14, r13, r10",
            "adox r13, r15",
            "mov r15, 0x130e0000d7f70e4",
            "mov [ rsp + 0x2a8 ], r13",
            "mulx r13, r10, r15",
            "adox r10, r14",
            "adox r12, r13",
            "seto dl",
            "mov r14, -0x2",
            "inc r14",
            "adox rdi, [ rsp - 0x40 ]",
            "mov r13, 0x9ffffcd2ffffffff",
            "xchg rdx, r13",
            "mulx r15, r14, rdi",
            "mov r15, 0xe4a7a5fe8fadffd6",
            "mov rdx, r14",
            "mov [ rsp + 0x2b0 ], r12",
            "mulx r12, r14, r15",
            "mov r15, 0x9ffffcd300000001",
            "mov byte ptr [ rsp + 0x2b8 ], r13b",
            "mov [ rsp + 0x2c0 ], r10",
            "mulx r10, r13, r15",
            "mov r15, 0xa803ca76f439266f",
            "mov [ rsp + 0x2c8 ], r12",
            "mov [ rsp + 0x2d0 ], rbp",
            "mulx rbp, r12, r15",
            "setc r15b",
            "clc",
            "mov [ rsp + 0x2d8 ], rbp",
            "mov rbp, -0x1",
            "movzx r11, r11b",
            "adcx r11, rbp",
            "adcx r9, [ rsp + 0x178 ]",
            "adcx rcx, [ rsp + 0x228 ]",
            "mov r11, 0xa2a7e8c30006b945",
            "mov [ rsp + 0x2e0 ], rcx",
            "mulx rcx, rbp, r11",
            "setc r11b",
            "clc",
            "adcx rbp, r10",
            "adcx r14, rcx",
            "setc r10b",
            "clc",
            "mov rcx, -0x1",
            "movzx r15, r15b",
            "adcx r15, rcx",
            "adcx r9, rbx",
            "adox r9, [ rsp + 0x68 ]",
            "seto r15b",
            "inc rcx",
            "adox r13, rdi",
            "adox rbp, r9",
            "mov r13, [ rsp + 0x2d0 ]",
            "setc bl",
            "clc",
            "mov rdi, -0x1",
            "movzx r8, r8b",
            "adcx r8, rdi",
            "adcx r13, [ rsp + 0x280 ]",
            "mov r8, [ rsp + 0x278 ]",
            "adcx r8, [ rsp + 0x270 ]",
            "movzx r9, byte ptr [ rsp + 0x1f8 ]",
            "seto cl",
            "movzx rdi, byte ptr [ rsp + 0x2a0 ]",
            "mov [ rsp + 0x2e8 ], r14",
            "mov r14, -0x1",
            "inc r14",
            "mov r14, -0x1",
            "adox rdi, r14",
            "adox r9, [ rsp + 0x268 ]",
            "seto dil",
            "inc r14",
            "mov r14, -0x1",
            "movzx r11, r11b",
            "adox r11, r14",
            "adox r13, [ rsp + 0x220 ]",
            "adcx r9, [ rsp + 0x288 ]",
            "adox r8, [ rsp + 0x210 ]",
            "movzx r11, dil",
            "mov r14, 0x0",
            "adcx r11, r14",
            "mov rdi, 0x443f9a5cda8a6c7b",
            "mov [ rsp + 0x2f0 ], r8",
            "mulx r8, r14, rdi",
            "clc",
            "mov rdi, -0x1",
            "movzx r10, r10b",
            "adcx r10, rdi",
            "adcx r14, [ rsp + 0x2c8 ]",
            "adox r9, [ rsp + 0x218 ]",
            "adcx r12, r8",
            "mov r10, 0x130e0000d7f70e4",
            "mulx rdi, r8, r10",
            "adox r11, [ rsp + 0x230 ]",
            "adcx r8, [ rsp + 0x2d8 ]",
            "mov r10, 0x2400000000002400",
            "mov [ rsp + 0x2f8 ], r8",
            "mov [ rsp + 0x300 ], r12",
            "mulx r12, r8, r10",
            "mov rdx, [ rsp + 0x290 ]",
            "seto r10b",
            "mov [ rsp + 0x308 ], r14",
            "mov r14, 0x0",
            "dec r14",
            "movzx rbx, bl",
            "adox rbx, r14",
            "adox rdx, [ rsp + 0x2e0 ]",
            "seto bl",
            "inc r14",
            "mov r14, -0x1",
            "movzx r15, r15b",
            "adox r15, r14",
            "adox rdx, [ rsp + 0xa0 ]",
            "adcx r8, rdi",
            "setc r15b",
            "clc",
            "adcx rbp, [ rsp + 0x118 ]",
            "mov rdi, 0x9ffffcd2ffffffff",
            "xchg rdx, rdi",
            "mov [ rsp + 0x310 ], r8",
            "mulx r8, r14, rbp",
            "seto r8b",
            "mov rdx, -0x1",
            "inc rdx",
            "mov rdx, -0x1",
            "movzx rcx, cl",
            "adox rcx, rdx",
            "adox rdi, [ rsp + 0x2e8 ]",
            "mov rcx, 0x2400000000002400",
            "mov rdx, r14",
            "mov byte ptr [ rsp + 0x318 ], r10b",
            "mulx r10, r14, rcx",
            "adcx rdi, [ rsp + 0x128 ]",
            "setc cl",
            "clc",
            "mov [ rsp + 0x320 ], r10",
            "mov r10, -0x1",
            "movzx rbx, bl",
            "adcx rbx, r10",
            "adcx r13, [ rsp + 0x2a8 ]",
            "movzx rbx, r15b",
            "lea rbx, [ rbx + r12 ]",
            "mov r12, 0xe4a7a5fe8fadffd6",
            "mulx r10, r15, r12",
            "mov r12, 0x9ffffcd300000001",
            "mov [ rsp + 0x328 ], r14",
            "mov byte ptr [ rsp + 0x330 ], cl",
            "mulx rcx, r14, r12",
            "mov r12, 0xa2a7e8c30006b945",
            "mov [ rsp + 0x338 ], r10",
            "mov [ rsp + 0x340 ], rbx",
            "mulx rbx, r10, r12",
            "seto r12b",
            "mov [ rsp + 0x348 ], r13",
            "mov r13, -0x2",
            "inc r13",
            "adox r10, rcx",
            "setc cl",
            "clc",
            "adcx r14, rbp",
            "adcx r10, rdi",
            "setc r14b",
            "clc",
            "adcx r10, [ rsp + 0x30 ]",
            "mov rbp, 0x9ffffcd2ffffffff",
            "xchg rdx, r10",
            "mulx r13, rdi, rbp",
            "mov r13, 0x9ffffcd300000001",
            "xchg rdx, rdi",
            "mov byte ptr [ rsp + 0x350 ], r14b",
            "mulx r14, rbp, r13",
            "mov r13, 0xe4a7a5fe8fadffd6",
            "mov byte ptr [ rsp + 0x358 ], r12b",
            "mov [ rsp + 0x360 ], r14",
            "mulx r14, r12, r13",
            "mov r13, 0xa2a7e8c30006b945",
            "mov [ rsp + 0x368 ], r14",
            "mov [ rsp + 0x370 ], r12",
            "mulx r12, r14, r13",
            "adox r15, rbx",
            "mov rbx, [ rsp + 0x2f0 ]",
            "setc r13b",
            "clc",
            "mov [ rsp + 0x378 ], r15",
            "mov r15, -0x1",
            "movzx rcx, cl",
            "adcx rcx, r15",
            "adcx rbx, [ rsp + 0x2c0 ]",
            "movzx rcx, byte ptr [ rsp + 0x2b8 ]",
            "mov r15, [ rsp + 0x298 ]",
            "lea rcx, [ rcx + r15 ]",
            "adcx r9, [ rsp + 0x2b0 ]",
            "adcx rcx, r11",
            "setc r15b",
            "clc",
            "adcx rbp, rdi",
            "mov rbp, [ rsp + 0x348 ]",
            "seto r11b",
            "mov rdi, 0x0",
            "dec rdi",
            "movzx r8, r8b",
            "adox r8, rdi",
            "adox rbp, [ rsp + 0x98 ]",
            "adox rbx, [ rsp + 0xa8 ]",
            "adox r9, [ rsp + 0xf8 ]",
            "adox rcx, [ rsp + 0x1c0 ]",
            "setc r8b",
            "clc",
            "adcx r14, [ rsp + 0x360 ]",
            "mov rdi, 0x443f9a5cda8a6c7b",
            "mov [ rsp + 0x380 ], r14",
            "mov byte ptr [ rsp + 0x388 ], r8b",
            "mulx r8, r14, rdi",
            "adcx r12, [ rsp + 0x370 ]",
            "movzx rdi, r15b",
            "mov [ rsp + 0x390 ], r12",
            "movzx r12, byte ptr [ rsp + 0x318 ]",
            "lea rdi, [ rdi + r12 ]",
            "adcx r14, [ rsp + 0x368 ]",
            "adox rdi, [ rsp + 0x1b8 ]",
            "mov r12, 0xa803ca76f439266f",
            "mov [ rsp + 0x398 ], r14",
            "mulx r14, r15, r12",
            "seto r12b",
            "mov byte ptr [ rsp + 0x3a0 ], r13b",
            "movzx r13, byte ptr [ rsp + 0x358 ]",
            "mov [ rsp + 0x3a8 ], r14",
            "mov r14, -0x1",
            "inc r14",
            "mov r14, -0x1",
            "adox r13, r14",
            "adox rbp, [ rsp + 0x308 ]",
            "adox rbx, [ rsp + 0x300 ]",
            "adcx r15, r8",
            "adox r9, [ rsp + 0x2f8 ]",
            "adox rcx, [ rsp + 0x310 ]",
            "adox rdi, [ rsp + 0x340 ]",
            "mov r13, 0xa803ca76f439266f",
            "xchg rdx, r13",
            "mulx r14, r8, r10",
            "mov rdx, 0x443f9a5cda8a6c7b",
            "mov [ rsp + 0x3b0 ], r15",
            "mov byte ptr [ rsp + 0x3b8 ], r12b",
            "mulx r12, r15, r10",
            "seto dl",
            "mov [ rsp + 0x3c0 ], r14",
            "mov r14, 0x0",
            "dec r14",
            "movzx r11, r11b",
            "adox r11, r14",
            "adox r15, [ rsp + 0x338 ]",
            "adox r8, r12",
            "setc r11b",
            "movzx r12, byte ptr [ rsp + 0x330 ]",
            "clc",
            "adcx r12, r14",
            "adcx rbp, [ rsp + 0x120 ]",
            "adcx rbx, [ rsp + 0x138 ]",
            "adcx r9, [ rsp + 0x188 ]",
            "adcx rcx, [ rsp + 0x180 ]",
            "mov r12, 0x130e0000d7f70e4",
            "xchg rdx, r12",
            "mov [ rsp + 0x3c8 ], rcx",
            "mulx rcx, r14, r10",
            "adcx rdi, [ rsp + 0x198 ]",
            "adox r14, [ rsp + 0x3c0 ]",
            "adox rcx, [ rsp + 0x328 ]",
            "mov [ rsp + 0x3d0 ], rcx",
            "mulx rcx, r10, r13",
            "setc dl",
            "clc",
            "mov [ rsp + 0x3d8 ], rdi",
            "mov rdi, -0x1",
            "movzx r11, r11b",
            "adcx r11, rdi",
            "adcx r10, [ rsp + 0x3a8 ]",
            "movzx r11, r12b",
            "movzx rdi, byte ptr [ rsp + 0x3b8 ]",
            "lea r11, [ r11 + rdi ]",
            "mov rdi, 0x2400000000002400",
            "xchg rdx, rdi",
            "mov [ rsp + 0x3e0 ], r10",
            "mulx r10, r12, r13",
            "adcx r12, rcx",
            "mov r13, [ rsp + 0x320 ]",
            "mov rcx, 0x0",
            "adox r13, rcx",
            "adc r10, 0x0",
            "add byte ptr [ rsp + 0x350 ], 0x7F",
            "adox rbp, [ rsp + 0x378 ]",
            "adox r15, rbx",
            "mov rbx, -0x1",
            "movzx rdi, dil",
            "adcx rdi, rbx",
            "adcx r11, [ rsp + 0x1b0 ]",
            "setc dil",
            "movzx rcx, byte ptr [ rsp + 0x3a0 ]",
            "clc",
            "adcx rcx, rbx",
            "adcx rbp, [ rsp + 0x28 ]",
            "adox r8, r9",
            "adcx r15, [ rsp + 0x20 ]",
            "adcx r8, [ rsp + 0x190 ]",
            "setc cl",
            "movzx r9, byte ptr [ rsp + 0x388 ]",
            "clc",
            "adcx r9, rbx",
            "adcx rbp, [ rsp + 0x380 ]",
            "adox r14, [ rsp + 0x3c8 ]",
            "setc r9b",
            "clc",
            "movzx rcx, cl",
            "adcx rcx, rbx",
            "adcx r14, [ rsp + 0x1d0 ]",
            "setc cl",
            "clc",
            "movzx r9, r9b",
            "adcx r9, rbx",
            "adcx r15, [ rsp + 0x390 ]",
            "adcx r8, [ rsp + 0x398 ]",
            "setc r9b",
            "clc",
            "adcx rbp, [ rsp - 0x48 ]",
            "adcx r15, [ rsp + 0x40 ]",
            "mov rbx, 0x9ffffcd2ffffffff",
            "mov rdx, rbx",
            "mov [ rsp + 0x3e8 ], r10",
            "mulx r10, rbx, rbp",
            "mov r10, 0xa803ca76f439266f",
            "mov rdx, rbx",
            "mov [ rsp + 0x3f0 ], r12",
            "mulx r12, rbx, r10",
            "mov r10, 0xe4a7a5fe8fadffd6",
            "mov byte ptr [ rsp + 0x3f8 ], dil",
            "mov byte ptr [ rsp + 0x400 ], cl",
            "mulx rcx, rdi, r10",
            "mov r10, 0x130e0000d7f70e4",
            "mov [ rsp + 0x408 ], r13",
            "mov [ rsp + 0x410 ], r11",
            "mulx r11, r13, r10",
            "mov r10, 0x9ffffcd300000001",
            "mov [ rsp + 0x418 ], r11",
            "mov [ rsp + 0x420 ], r14",
            "mulx r14, r11, r10",
            "mov r10, 0xa2a7e8c30006b945",
            "mov byte ptr [ rsp + 0x428 ], r9b",
            "mov [ rsp + 0x430 ], r15",
            "mulx r15, r9, r10",
            "seto r10b",
            "mov [ rsp + 0x438 ], r11",
            "mov r11, -0x2",
            "inc r11",
            "adox r9, r14",
            "mov r14, 0x443f9a5cda8a6c7b",
            "mov byte ptr [ rsp + 0x440 ], r10b",
            "mulx r10, r11, r14",
            "adox rdi, r15",
            "adox r11, rcx",
            "adox rbx, r10",
            "adox r13, r12",
            "adcx r8, [ rsp + 0x58 ]",
            "seto r12b",
            "mov rcx, -0x2",
            "inc rcx",
            "adox rbp, [ rsp + 0x438 ]",
            "adox r9, [ rsp + 0x430 ]",
            "mov rbp, [ rsp + 0x420 ]",
            "seto r15b",
            "movzx r10, byte ptr [ rsp + 0x428 ]",
            "inc rcx",
            "mov rcx, -0x1",
            "adox r10, rcx",
            "adox rbp, [ rsp + 0x3b0 ]",
            "mov r10, [ rsp + 0x3d0 ]",
            "seto cl",
            "movzx r14, byte ptr [ rsp + 0x440 ]",
            "mov [ rsp + 0x448 ], r13",
            "mov r13, -0x1",
            "inc r13",
            "mov r13, -0x1",
            "adox r14, r13",
            "adox r10, [ rsp + 0x3d8 ]",
            "setc r14b",
            "clc",
            "movzx r15, r15b",
            "adcx r15, r13",
            "adcx r8, rdi",
            "mov rdi, [ rsp + 0x410 ]",
            "adox rdi, [ rsp + 0x408 ]",
            "mov r15, 0x2400000000002400",
            "mov [ rsp + 0x450 ], rbx",
            "mulx rbx, r13, r15",
            "seto dl",
            "movzx r15, byte ptr [ rsp + 0x400 ]",
            "mov [ rsp + 0x458 ], rdi",
            "mov rdi, -0x1",
            "inc rdi",
            "mov rdi, -0x1",
            "adox r15, rdi",
            "adox r10, [ rsp + 0x1c8 ]",
            "setc r15b",
            "clc",
            "movzx rcx, cl",
            "adcx rcx, rdi",
            "adcx r10, [ rsp + 0x3e0 ]",
            "setc cl",
            "clc",
            "movzx r12, r12b",
            "adcx r12, rdi",
            "adcx r13, [ rsp + 0x418 ]",
            "mov r12, 0x0",
            "adcx rbx, r12",
            "seto dil",
            "mov [ rsp + 0x460 ], rbx",
            "mov rbx, 0x9ffffcd300000001",
            "mov [ rsp + 0x468 ], r13",
            "mov r13, r9",
            "sub r13, rbx",
            "dec r12",
            "movzx r14, r14b",
            "adox r14, r12",
            "adox rbp, [ rsp + 0x1a8 ]",
            "setc r14b",
            "clc",
            "movzx r15, r15b",
            "adcx r15, r12",
            "adcx rbp, r11",
            "adox r10, [ rsp + 0x1a0 ]",
            "seto r11b",
            "setc r15b",
            "add r12b, r14b",
            "mov r12, 0xa2a7e8c30006b945",
            "mov rbx, r8",
            "sbb rbx, r12",
            "mov r14, 0xe4a7a5fe8fadffd6",
            "mov r12, rbp",
            "sbb r12, r14",
            "movzx r14, dl",
            "mov [ rsp + 0x470 ], r12",
            "movzx r12, byte ptr [ rsp + 0x3f8 ]",
            "lea r14, [ r14 + r12 ]",
            "mov r12, [ rsp + 0x1f0 ]",
            "mov rdx, 0x0",
            "dec rdx",
            "movzx rdi, dil",
            "adox rdi, rdx",
            "adox r12, [ rsp + 0x458 ]",
            "adox r14, [ rsp + 0x250 ]",
            "setc dil",
            "clc",
            "movzx rcx, cl",
            "adcx rcx, rdx",
            "adcx r12, [ rsp + 0x3f0 ]",
            "adcx r14, [ rsp + 0x3e8 ]",
            "seto cl",
            "adc cl, 0x0",
            "movzx rcx, cl",
            "add r15b, 0x7F",
            "adox r10, [ rsp + 0x450 ]",
            "movzx r11, r11b",
            "adcx r11, rdx",
            "adcx r12, [ rsp + 0x208 ]",
            "adox r12, [ rsp + 0x448 ]",
            "adcx r14, [ rsp + 0x200 ]",
            "adox r14, [ rsp + 0x468 ]",
            "movzx rcx, cl",
            "movzx r15, cl",
            "adcx r15, [ rsp + 0x260 ]",
            "adox r15, [ rsp + 0x460 ]",
            "seto r11b",
            "setc cl",
            "add dl, dil",
            "mov rdx, 0x443f9a5cda8a6c7b",
            "mov [ rsp + 0x478 ], r13",
            "mov r13, r10",
            "sbb r13, rdx",
            "mov rdi, 0xa803ca76f439266f",
            "mov rdx, r12",
            "sbb rdx, rdi",
            "movzx rdi, r11b",
            "movzx rcx, cl",
            "lea rdi, [ rdi + rcx ]",
            "mov rcx, 0x130e0000d7f70e4",
            "mov r11, r14",
            "sbb r11, rcx",
            "mov rcx, 0x2400000000002400",
            "mov [ rsp + 0x480 ], r11",
            "mov r11, r15",
            "sbb r11, rcx",
            "mov rcx, 0x0",
            "sbb rdi, rcx",
            "cmovc rbx, r8",
            "cmovc r13, r10",
            "mov rdi, [ rsp - 0x50 ]",
            "mov [ rdi + 0x18 ], r13",
            "cmovc rdx, r12",
            "mov [ rdi + 0x20 ], rdx",
            "mov r8, [ rsp + 0x480 ]",
            "cmovc r8, r14",
            "cmovc r11, r15",
            "mov [ rdi + 0x30 ], r11",
            "mov r10, [ rsp + 0x478 ]",
            "cmovc r10, r9",
            "mov [ rdi + 0x0 ], r10",
            "mov r9, [ rsp + 0x470 ]",
            "cmovc r9, rbp",
            "mov [ rdi + 0x10 ], r9",
            "mov [ rdi + 0x8 ], rbx",
            "mov [ rdi + 0x28 ], r8",
            "mov rbx, [ rsp - 0x80 ]",
            "mov rbp, [ rsp - 0x78 ]",
            "mov r12, [ rsp - 0x70 ]",
            "mov r13, [ rsp - 0x68 ]",
            "mov r14, [ rsp - 0x60 ]",
            "mov r15, [ rsp - 0x58 ]",
            "add rsp, 1288",
            // (The `ret` instruction here seems to cause the tests to segfault.)
            // "ret",

            in("rsi") r_in1.as_ptr(),
            in("rdx") r_in2.as_mut_ptr(),
            in("rdi") r_out.as_mut_ptr(),


            out("rax") _,
            out("rcx") _,

            out("r8") _,
            out("r9") _,
            out("r10") _,
            out("r11") _,
            out("r12") _,
            out("r13") _,
            out("r14") _,
            out("r15") _,

            options(readonly, nostack)
        )
    }

    // (fn changed to match mul sig.)
    // r_out
}

#[cfg(test)]
pub(crate) mod tests {
    use super::mul_asm;
    use crate::pluto_eris::fields::fp::*;
    use crate::pluto_eris::fields::fp_fiat::{
        add, from_montgomery, montgomery_domain_field_element, mul,
        non_montgomery_domain_field_element, opp, square, sub, to_montgomery,
    };
    use ff::Field;
    use rand::RngCore;
    use rand_core::SeedableRng;
    use rand_xorshift::XorShiftRng;

    fn random(mut rng: impl RngCore) -> [u64; 7] {
        [
            rng.next_u64(),
            rng.next_u64(),
            rng.next_u64(),
            rng.next_u64(),
            rng.next_u64(),
            rng.next_u64(),
            rng.next_u64(),
        ]
    }

    fn random_multiplication_test(
        mg_a: &montgomery_domain_field_element,
        mg_b: &montgomery_domain_field_element,
        fp_a: &Fp,
        fp_b: &Fp,
    ) {
        let in1 = core::hint::black_box(mg_a);
        let in2 = core::hint::black_box(mg_b);
        let mut ret = core::hint::black_box(montgomery_domain_field_element([0;7]));
        
        let now = std::time::Instant::now();
        mul(&mut ret, &in1, &in2);
        let duration = std::time::Instant::now() - now;
        println!("duration {:?}", duration);
    }

    #[test]
    fn test_fp_fiat() {
        let mut rng = XorShiftRng::from_seed([
            0x59, 0x62, 0xbe, 0x5d, 0x76, 0x3d, 0x31, 0x8d, 0x17, 0xdb, 0x37, 0x32, 0x54, 0x06,
            0xbc, 0xe5,
        ]);

        for _ in 0..100 {
            let raw_a = random(&mut rng);
            let raw_b = random(&mut rng);
            let non_mg_a = non_montgomery_domain_field_element(raw_a);
            let non_mg_b = non_montgomery_domain_field_element(raw_b);
            let mut mg_a = montgomery_domain_field_element([0, 0, 0, 0, 0, 0, 0]);
            to_montgomery(&mut mg_a, &non_mg_a);
            let mut mg_b = montgomery_domain_field_element([0, 0, 0, 0, 0, 0, 0]);
            to_montgomery(&mut mg_b, &non_mg_b);
            let fp_a = Fp::from_raw(raw_a);
            let fp_b = Fp::from_raw(raw_b);
            assert_eq!(mg_a.0, fp_a.0);
            assert_eq!(mg_b.0, fp_b.0);
            random_multiplication_test(&mg_a, &mg_b, &fp_a, &fp_b);
        }
    }
}
